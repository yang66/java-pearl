package com.robert.dsal.math.matrix.rotate.bylinemap;

/**
 * 请注意：其实映射方法使程序变得复杂，请看4次移动法和对折法
 * 
 * 解法1：把一圈元素映射成为一个线性的数组，然后，移位，这样容易移位
 * 
 * 注意1：一圈索引映射成一条线的索引
 * 
 * 00, 40, 44, 04, 00 
 * 11, 31, 33, 13, 11 
 * ...... 
 * (l, l), (n-1-l, l), (n-1-l, n-1-l), (l, n-l-l), (l, l)
 * 
 * l是圈的层次，也就是第几圈，n是矩阵的维数
 * 
 * 注意2：每圈一共有的元素
 * n = 5
 * 0, (5-1) * 4
 * 1, (5-2-1) * 4
 * 1, (5-2*2-1) * 4
 * ......
 * l, (n-2*l-1) * 4
 * 
 * 注意3：如果传入N， 记得(N - 0) / 2是一半，但是每次使用的时候要N - 1, 否则N越界
 * 
 * 注意4： 对于矩阵x表示列数，y表示行数，因此使用矩阵的时候y是一位数组，x是二维数组，即matrix[y][x]
 * 
 * 解法2：把一圈元素映射成为一个线性的数组，可以通过字符串两次反转来移位，效率高
 * 
 */
public interface RotateMatrix {
	public void rotateMatrix(int[][] matrix);
}
